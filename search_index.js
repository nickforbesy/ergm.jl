var documenterSearchIndex = {"docs":
[{"location":"models/#Specifying-Exponential-Random-Graph-Models","page":"Specifying Exponential Random Graph Models","title":"Specifying Exponential Random Graph Models","text":"","category":"section"},{"location":"models/#Triplet-Subgraphs","page":"Specifying Exponential Random Graph Models","title":"Triplet Subgraphs","text":"","category":"section"},{"location":"models/","page":"Specifying Exponential Random Graph Models","title":"Specifying Exponential Random Graph Models","text":"Many of the pre-defined ERGMs are based on counting triplet subgraphs. In all of the pre-defined models, the sufficient statistics count induced triplet subgraphs. In the case of simple directed graphs, there are 16 isomorphism classes of triplet subgraphs, which are ordered as below:","category":"page"},{"location":"models/","page":"Specifying Exponential Random Graph Models","title":"Specifying Exponential Random Graph Models","text":"(Image: )","category":"page"},{"location":"models/#Pre-defined-Models","page":"Specifying Exponential Random Graph Models","title":"Pre-defined Models","text":"","category":"section"},{"location":"models/","page":"Specifying Exponential Random Graph Models","title":"Specifying Exponential Random Graph Models","text":"models.SimpleModel","category":"page"},{"location":"models/#ergm.models.SimpleModel","page":"Specifying Exponential Random Graph Models","title":"ergm.models.SimpleModel","text":"SimpleModel(number_of_nodes::Int, statistics::Vector{Function}, parameters::Vector{Float64})\n\nA naively implemented model over sparse directed graphs.\n\nThis model should not be used in practice but provides a reference  implementation of the Model interface. This model calls the provided functions to compute sufficient statistics from scratch every time the statistics are queried rather than efficiently updating the statistics as the state is incrementally changed and caching them.\n\nArguments\n\nnumber_of_nodes::Int: define the model on graphs of type SparseDirectedGraph{numberofnodes}\nstatistics::Vector: a vector of functions, each of which takes a SparseDirectedGraph   and returns the value of one of the sufficient statistics.\nparameters::Vector{Float64}: initial values of the natural parameters corresponding   to each sufficient statistic.\n\n\n\n\n\n","category":"type"},{"location":"models/","page":"Specifying Exponential Random Graph Models","title":"Specifying Exponential Random Graph Models","text":"models.DirectedSpatialTripletModel","category":"page"},{"location":"models/#ergm.models.DirectedSpatialTripletModel","page":"Specifying Exponential Random Graph Models","title":"ergm.models.DirectedSpatialTripletModel","text":"DirectedSpatialTripletModel(node_embedding::Matrix{Float64}, motif_radius::Float64)\n\nThe sufficient statistics of this ERGM are the density of edges, the density of reciprocal edges, and the densities of the 13 connected triplet subgraphs in the same order as they are presented in the figure in the documentation page of specifying an ERGM. This makes for 15 parameters in total.\n\nAll edges and reciprocal edges are counted when computing the sufficient statistics, but only local connected triplet subgraphs are counted. Such a subgraph is considered local if the distance between all pairs of involved nodes is less than motif_radius. Note also that the same edge can be included in the edge density and reciprocal edge density statistics (as well as involved in connected triplets), but that any set of three nodes can be included in at most one of the connected triplet densities.\n\nAll densities are just total counts divided by the number of nodes in the graph, which is the appropriate scaling for large spatially local graphs.\n\nArguments\n\nnode_embedding::Matrix{Float64}: each row node_embedding[i, :] specifies the coordinates of the ith node in a Euclidean space.\nmotif_radius::Float64: defines what connected triplet subgraphs are considered local, as described above.\nparameters::Vector{Float64}: natural paramters corresponding to each of the 15 sufficient statistics.\n\n\n\n\n\n","category":"type"},{"location":"models/#Custom-Models","page":"Specifying Exponential Random Graph Models","title":"Custom Models","text":"","category":"section"},{"location":"models/","page":"Specifying Exponential Random Graph Models","title":"Specifying Exponential Random Graph Models","text":"A model is a subtype M of the abstract type models.Model that implements the below interface. Models are also stateful, keeping track of one particular graph. This is useful for computing how the sufficient statistics change when making small changes to the underlying graph without having to recompute the statistics from scratch.","category":"page"},{"location":"models/","page":"Specifying Exponential Random Graph Models","title":"Specifying Exponential Random Graph Models","text":"models.get_sample_space","category":"page"},{"location":"models/#ergm.models.get_sample_space","page":"Specifying Exponential Random Graph Models","title":"ergm.models.get_sample_space","text":"get_sample_space(model::Model)::Any\n\nRetrieve the sample space over which the model is defined.\n\n\n\n\n\n","category":"function"},{"location":"models/","page":"Specifying Exponential Random Graph Models","title":"Specifying Exponential Random Graph Models","text":"models.get_state","category":"page"},{"location":"models/#ergm.models.get_state","page":"Specifying Exponential Random Graph Models","title":"ergm.models.get_state","text":"get_state(model::Model)::Any\n\nRetrieve the current model state.\n\n\n\n\n\n","category":"function"},{"location":"models/","page":"Specifying Exponential Random Graph Models","title":"Specifying Exponential Random Graph Models","text":"models.set_state","category":"page"},{"location":"models/#ergm.models.set_state","page":"Specifying Exponential Random Graph Models","title":"ergm.models.set_state","text":"set_state(model::Model, state::Any)\n\nSet the model's state to a particular graph. This will throw away all saved information about the previous state and start computing sufficient statistics from scratch for the new state.\n\n\n\n\n\n","category":"function"},{"location":"models/","page":"Specifying Exponential Random Graph Models","title":"Specifying Exponential Random Graph Models","text":"models.get_statistics","category":"page"},{"location":"models/#ergm.models.get_statistics","page":"Specifying Exponential Random Graph Models","title":"ergm.models.get_statistics","text":"get_statistics(model::Model)::Vector{Float64}\n\nReturn a vector of the sufficient statistics of the current model state.\n\n\n\n\n\n","category":"function"},{"location":"models/","page":"Specifying Exponential Random Graph Models","title":"Specifying Exponential Random Graph Models","text":"models.test_update","category":"page"},{"location":"models/#ergm.models.test_update","page":"Specifying Exponential Random Graph Models","title":"ergm.models.test_update","text":"test_update(model::Model, index::Any, value::Any)::Vector{Float64}\n\nCompute the new sufficient statistics if we were to update one edge of the current state graph.\n\nNote that this function does not actually change the model state, but returns the hypothetical new  statistics if the edge with a given index is set to the given value\n\n\n\n\n\n","category":"function"},{"location":"models/","page":"Specifying Exponential Random Graph Models","title":"Specifying Exponential Random Graph Models","text":"models.apply_update","category":"page"},{"location":"models/#ergm.models.apply_update","page":"Specifying Exponential Random Graph Models","title":"ergm.models.apply_update","text":"apply_update(model::Model, index::Any, value::Any)\n\nApply an update the model state.\n\nIn contrast to test_update, this function will actually mutate the model state. This function does not return the new sufficient statistics, since they can now be computed using get_stats because the model state was updated.\n\n\n\n\n\n","category":"function"},{"location":"models/","page":"Specifying Exponential Random Graph Models","title":"Specifying Exponential Random Graph Models","text":"models.get_parameters(::models.Model)","category":"page"},{"location":"models/#ergm.models.get_parameters-Tuple{ergm.models.Model}","page":"Specifying Exponential Random Graph Models","title":"ergm.models.get_parameters","text":"get_parameters(model::Model)::Vector{Float64}\n\nRetrieve the current natural parameters corresponding to each sufficient statistic.\n\n\n\n\n\n","category":"method"},{"location":"models/","page":"Specifying Exponential Random Graph Models","title":"Specifying Exponential Random Graph Models","text":"models.set_parameters","category":"page"},{"location":"models/#ergm.models.set_parameters","page":"Specifying Exponential Random Graph Models","title":"ergm.models.set_parameters","text":"set_parameters(model::Model, parameters::Vector{Float64})\n\nSet the current natural parameters corresponding to each sufficient statistic.\n\n\n\n\n\n","category":"function"},{"location":"sampling/#Sampling-from-ERGMs","page":"Sampling from ERGMs","title":"Sampling from ERGMs","text":"","category":"section"},{"location":"sampling/","page":"Sampling from ERGMs","title":"Sampling from ERGMs","text":"Sampling from an ERGM is accomplished by constructing a sampling.GibbsSampler object from a chosen ERGM (an object of type models.Model) and passing it to the function sampling.sample.","category":"page"},{"location":"sampling/","page":"Sampling from ERGMs","title":"Sampling from ERGMs","text":"sampling.GibbsSampler","category":"page"},{"location":"sampling/#ergm.sampling.GibbsSampler","page":"Sampling from ERGMs","title":"ergm.sampling.GibbsSampler","text":"GibbsSampler(model::Model; burn_in::Int, sample_interval::Int)\n\nConstruct a Gibbs sampler for an given ERGM.\n\nA Gibbs sampler implements a Markov chain where each step can toggle at most one edge in the state graph. Before returning the first sample, burn_in steps are taken along the Markov chain. After the first sample, sample_interval steps are taken between each pair of samples returned with the goal of producing approximately independent samples.\n\n\n\n\n\n","category":"type"},{"location":"sampling/#Choosing-Sampler-Parameters","page":"Sampling from ERGMs","title":"Choosing Sampler Parameters","text":"","category":"section"},{"location":"sampling/","page":"Sampling from ERGMs","title":"Sampling from ERGMs","text":"sampling.plot_diagnostics","category":"page"},{"location":"sampling/#ergm.sampling.plot_diagnostics","page":"Sampling from ERGMs","title":"ergm.sampling.plot_diagnostics","text":"Plot diagnostic functions useful for choosing Gibbs sampler parameters.\n\nThis function takes steps steps along the Gibbs sampler Markov chain starting from an empty graph and records the value of the graph statistics at every individual step. This is used to compute rolling means of each statistics with window size window_size as well as the autocorrelation function of each of the statistics.\n\nTypically, we want to choose a burn-in length for the sampler long enough for all the rolling means of the statistics to stabilize, which can be judged heuristically just by looking at the plot of the rolling means.\n\nWe also need to choose an interval between samples long enough that the autocorrelation of each of the statistics drops off near zero between returned samples, which is a necessary condition for the sampler to generate high-equality, approximately independent samples.\n\nThis function returns a matrix of all graph statistics, a matrix of graph statistics smoothed with the given window size, a matrix of autocorrelation functions, and the plot object.\n\n\n\n\n\n","category":"function"},{"location":"spaces/#Specifying-Sample-Spaces-of-Graphs","page":"Specifying Sample Spaces of Graphs","title":"Specifying Sample Spaces of Graphs","text":"","category":"section"},{"location":"spaces/","page":"Specifying Sample Spaces of Graphs","title":"Specifying Sample Spaces of Graphs","text":"The sample space for a model defines the set of all graphs our model assigns probability to. For example, we may wish to only consider directed graphs with binary edges and no self loops, which corresponds to graphs of type spaces.SparseDirectedGraph. This particular type also stores graphs as sparse arrays and it suited for large graphs with low edge density.","category":"page"},{"location":"spaces/#Matrix-Representation","page":"Specifying Sample Spaces of Graphs","title":"Matrix Representation","text":"","category":"section"},{"location":"spaces/","page":"Specifying Sample Spaces of Graphs","title":"Specifying Sample Spaces of Graphs","text":"To keep things consistent, adjacency matrices of graphs will use the i,j entry to indicate the presence of edge j -> i.","category":"page"},{"location":"spaces/#Pre-defined-Sample-Spaces","page":"Specifying Sample Spaces of Graphs","title":"Pre-defined Sample Spaces","text":"","category":"section"},{"location":"spaces/","page":"Specifying Sample Spaces of Graphs","title":"Specifying Sample Spaces of Graphs","text":"spaces.SparseDirectedGraph","category":"page"},{"location":"spaces/#ergm.spaces.SparseDirectedGraph","page":"Specifying Sample Spaces of Graphs","title":"ergm.spaces.SparseDirectedGraph","text":"Directed graphs backed by sparse matrices.\n\nThis type includes a parameter n to specify the number of nodes. These graphs also have no self loops and edges are binary. To create an empty graph on n nodes, use SparseDirectedGraph{n}(). To create a graph from a sparse adjacency matrix adjacency, use SparseDirectedGraph(adjacency).\n\nEdge indices for this type take the form (s, t) where s::Int and t::Int are the indices of the respective source and target nodes of the edge. Node indices are integers i in the range 1 ≤ i ≤ n, where n is the type paramter specifying the number of nodes in the graph. For example, querying the value of the edge from node 1 to node 3 in the graph x :: SparseDirectedGraph is accomplished by getindex(x, (1, 3)) or, equivalently, x[(1, 3)].\n\n\n\n\n\n","category":"type"},{"location":"spaces/#Custom-Sample-Spaces","page":"Specifying Sample Spaces of Graphs","title":"Custom Sample Spaces","text":"","category":"section"},{"location":"spaces/","page":"Specifying Sample Spaces of Graphs","title":"Specifying Sample Spaces of Graphs","text":"A space of graphs is a subtype of spaces.SampleSpace that implements the below interface. In addition to the below interface, all sample spaces must have a constructor that takes no arguments are returns a value corresponding to an empty graph. This is used to initialize samplers, for example. Currently, it is assumed that edges are binary in all SampleSpaces and this interface will need to be augmented to support more edge values.","category":"page"},{"location":"spaces/","page":"Specifying Sample Spaces of Graphs","title":"Specifying Sample Spaces of Graphs","text":"spaces.random_index(::spaces.SampleSpace)","category":"page"},{"location":"spaces/#ergm.spaces.random_index-Tuple{ergm.spaces.SampleSpace}","page":"Specifying Sample Spaces of Graphs","title":"ergm.spaces.random_index","text":"random_index(g::SampleSpace)\n\nSample the index of an edge uniformly. The edge need not actually be present.\n\n\n\n\n\n","category":"method"},{"location":"spaces/","page":"Specifying Sample Spaces of Graphs","title":"Specifying Sample Spaces of Graphs","text":"Base.getindex(::spaces.SparseDirectedGraph, ::Any)","category":"page"},{"location":"spaces/#Base.getindex-Tuple{ergm.spaces.SparseDirectedGraph, Any}","page":"Specifying Sample Spaces of Graphs","title":"Base.getindex","text":"getindex(g::SampleSpace, index)\n\nRetrieve value of edge with given index.\n\n\n\n\n\n","category":"method"},{"location":"spaces/","page":"Specifying Sample Spaces of Graphs","title":"Specifying Sample Spaces of Graphs","text":"Base.setindex!(::spaces.SparseDirectedGraph, ::Any, ::Any)","category":"page"},{"location":"spaces/#Base.setindex!-Tuple{ergm.spaces.SparseDirectedGraph, Any, Any}","page":"Specifying Sample Spaces of Graphs","title":"Base.setindex!","text":"setindex!(g::SampleSpace, value, index)\n\nSet value of edge with given index.\n\n\n\n\n\n","category":"method"},{"location":"spaces/","page":"Specifying Sample Spaces of Graphs","title":"Specifying Sample Spaces of Graphs","text":"Base.copy(::spaces.SparseDirectedGraph)","category":"page"},{"location":"spaces/#Base.copy-Tuple{ergm.spaces.SparseDirectedGraph}","page":"Specifying Sample Spaces of Graphs","title":"Base.copy","text":"copy(g::SampleSpace)\n\nPerform a deep copy of an element of the space.\n\n\n\n\n\n","category":"method"},{"location":"#ERGM.jl","page":"ERGM.jl","title":"ERGM.jl","text":"","category":"section"},{"location":"","page":"ERGM.jl","title":"ERGM.jl","text":"This package is a work in progress. The goal is to implement some basic ERGM sampling and inference algorithms, with an eye towards easy extensibility.","category":"page"}]
}
